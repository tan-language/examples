; #ref https://github.com/ProgrammingRust/mandelbrot/blob/single-threaded/src/main.rs

; #todo need a LUT to convert t (escape-time) values to colors.

; #todo consider /codecs/png, /png, graphics/png, graphics/codecs/png, ...
; #todo what about using `raster` instead of `image`?
; (use /image/png)

(use /fs)
(use [Coder write] /image/png)
(use [Complex + * abs] /math/complex)

(let [re-min im-min re-max im-max] [-2.0 -2.0 2.0 2.0])
(let [width height] [256 256])

; #todo what is a good name?
(let img (Buffer (* width height)))

; #todo consider returning (Maybe Int)
(let mandelbrot (Func [c]
    (let #mut z (Complex 0.0))
    (for [t 0..48]
        (if (> (abs z) 2.0)
            (return t)
        )
        ; z = z * z + c;
        (set! z (+ (* z z) c))
    )
    0
))

(let re-delta (- re-max re-min))
(let im-delta (- im-max im-min))

(let #mut i 0)

(for [y 0..height]
    ; im = ((y / height) * (im-max - im-min)) + im-min
    (let im
        (+
            (*
                ; #todo consider returning Float for division of Int?
                ; #todo and have special division operator if I want integer division, e.g. (int-div x y)
                (/ (Float y) (Float height))
                im-delta
            )
            im-min
        )
    )
    (for [x 0..width]
        ; re = ((x / width) * (re-max - re-min)) + re-min
        (let re
            (+
                (*
                    ; #todo can optimize further, width is constant, can go into re-delta.
                    (/ (Float x) (Float width))
                    re-delta
                )
                re-min
            )
        )
        (let z (Complex re im))
        (let color (U8 (mandelbrot z)))
        (put img i color)
        (set! i (+ i 1))
    )
    (echo "${y}")
)

(let file (fs/create "mandelbrot.png"))
(let coder (Coder width height :gray-8 file))
(echo (type-of coder))
(echo (type-of img))
(write coder img)