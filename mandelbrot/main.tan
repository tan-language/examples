; #ref https://github.com/ProgrammingRust/mandelbrot/blob/single-threaded/src/main.rs

; #wip not working yet

; #todo need a LUT to convert t (escape-time) values to colors.
; #todo need Int32 type or I32

; #todo consider /codecs/png, /png, graphics/png, graphics/codecs/png, ...
; #todo what about using `raster` instead of `image`?
; (use /image/png)

(use [Complex + * abs] /math/complex)

(let [re-min im-min re-max im-max] [-2.0 -2.0 2.0 2.0])
(let [width height] [512 512])

; #todo what is a good name?
(let img (Buffer (* width height)))

; #todo consider returning (Maybe Int)
(let mandelbrot (Func [c limit]
    (let #mut z (Complex 0.0))
    (for [t 0..limit]
        (if (> (abs z) 2.0)
            (return t)
        )
        ; z = z * z + c;
        (set! z (+ (* z z) c))
    )
    0
))

(for [y 0..height]
    ; im = ((y / height) * (im-max - im-min)) + im-min
    (let im
        (+
            (*
                ; #todo consider returning Float for division of Int?
                ; #todo and have special division operator if I want integer division, e.g. (int-div x y)
                (/ (Float y) (Float height))
                (- im-max im-min))
            im-min
        )
    )
    (for [x 0..width]
        ; re = ((x / width) * (re-max - re-min)) + re-min
        (let re
            (+
                (*
                    (/ (Float x) (Float width))
                    (- re-max re-min))
                re-min
            )
        )
        (let z (Complex re im))
        (let color (U8 (mandelbrot z 200)))
        (echo "${y}x${x} = ${color}")
        (put img (+ (* width y) x) color)
    )
)

(echo img)

; #todo consider write-image, write-file, etc...
; #todo what should be the order of arguments?
; #todo encoder for various pixel types?
; (png/write-to-file "mandelbrot.png", pixels)
